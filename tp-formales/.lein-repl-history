(expandir-nexts (list '(PRINT 1)))
calcular-espresion '(X = 5) ['((10 (PRINT X))) [10 1] [] [] [] 0 '{}])
(calcular-espresion '(X = 5) ['((10 (PRINT X))) [10 1] [] [] [] 0 '{}]))
(calcular-espresion '(X + 5) ['((10 (PRINT X))) [10 1] [] [] [] 0 '{X 2}])))
(calcular-espresion '(X + 5) ['((10 (PRINT X))) [10 1] [] [] [] 0 '{X 2}]))
(calcular-espresion '(X + 5) ['((10 (PRINT X))) [10 1] [] [] [] 0 '{X 2}])
(calcular-expresion '(X = 5) ['((10 (PRINT X))) [10 1] [] [] [] 0 '{}]))
(calcular-expresion '(X = 5) ['((10 (PRINT X))) [10 1] [] [] [] 0 '{}])
(calcular-expresion '(X + 5) ['((10 (PRINT X))) [10 1] [] [] [] 0 '{X 2}])
(calcular-expresion '(X + 5) '['((10 (PRINT X))) [10 1] [] [] [] 0 '{X 2}])
(map-expresion '{X 5 Y% 2} 'X)
(map-expresion {X 5 Y% 2} 'X)
(map-expresion '{X 5 Y% 2} X)
(expandir-nexts '(NEXT I , J))
(expandir-nexts (list 'NEXT 'I (symbol ",") 'J))
(expandir-nexts '((list 'NEXT 'I (symbol ",") 'J)))
(expandir-nexts (list (list 'NEXT 'I (symbol ",") 'J)))
(anular-invalidos '(IF T = 0 THEN 100))
(/ 0 9)
(/9 0)
(pst)
(preprocesar-expresion '(LEN ( W$ )) ['((100 (PRINT "ENTER A WORD: ") (INPUT W$)) (110 (T = LEN ( W$ )) (IF T = 0 THEN 100)) (120 (PRINT "IT'S SPELLED AS FOLLOWS: " ;)) (130 (FOR I = 1 TO T)) (140 (L = ASC ( MID$ ( W$ , I , 1 ) ) - 64)) (150 (IF L < 1 OR L > 26 THEN PRINT "??? " ;) (GOTO 190)) (160 (FOR J = 1 TO L) (READ S$) (NEXT J)) (170 (PRINT S$ ; " " ;)) (180 (RESTORE)) (190 (NEXT I)) (200 (END)) (1000 (DATA ALFA , BRAVO , CHARLIE , DELTA , ECHO , FOXTROT , GOLF , HOTEL)) (1010 (DATA INDIA , JULIETT , KILO , LIMA , MIKE , NOVEMBER , OSCAR , PAPA)) (1020 (DATA QUEBEC , ROMEO , SIERRA , TANGO , UNIFORM , VICTOR , WHISKEY , X-RAY)) (1030 (DATA YANKEE) (DATA ZULU ) (REM EL ULTIMO VALOR ES ZULU)) (1040 (DATA HOLA MUNDO))) [110 2] [] [] [] 0 '{W$ "HO"}]
)
(preprocesar-expresion '(LEN ( W$ )) ['((100 (PRINT "ENTER A WORD: ") (INPUT W$)) (110 (T = LE
N ( W$ )) (IF T = 0 THEN 100)) (120 (PRINT "IT'S SPELLED AS FOLLOWS: " ;)) (130 (FOR I = 1 TO T)) (140 (L = ASC (
 MID$ ( W$ , I , 1 ) ) - 64)) (150 (IF L < 1 OR L > 26 THEN PRINT "??? " ;) (GOTO 190)) (160 (FOR J = 1 TO L) (RE
AD S$) (NEXT J)) (170 (PRINT S$ ; " " ;)) (180 (RESTORE)) (190 (NEXT I)) (200 (END)) (1000 (DATA ALFA , BRAVO , C
HARLIE , DELTA , ECHO , FOXTROT , GOLF , HOTEL)) (1010 (DATA INDIA , JULIETT , KILO , LIMA , MIKE , NOVEMBER , OS
CAR , PAPA)) (1020 (DATA QUEBEC , ROMEO , SIERRA , TANGO , UNIFORM , VICTOR , WHISKEY , X-RAY)) (1030 (DATA YANKE
E) (DATA ZULU ) (REM EL ULTIMO VALOR ES ZULU)) (1040 (DATA HOLA MUNDO))) [110 2] [] [] [] 0 '{W$ "HO"}])
(preprocesar-expresion '(LEN ( W$ )) ['((100 (PRINT "ENTER A WORD: ") (INPUT W$)) (110 (T = LE
N ( W$ )) (IF T = 0 THEN 100)) (120 (PRINT "IT'S SPELLED AS FOLLOWS: " ;)) (130 (FOR I = 1 TO T)) (140 (L = ASC (
 MID$ ( W$ , I , 1 ) ) - 64)) (150 (IF L < 1 OR L > 26 THEN PRINT "??? " ;) (GOTO 190)) (160 (FOR J = 1 TO L) (RE
AD S$) (NEXT J)) (170 (PRINT S$ ; " " ;)) (180 (RESTORE)) (190 (NEXT I)) (200 (END)) (1000 (DATA ALFA , BRAVO , C
HARLIE , DELTA , ECHO , FOXTROT , GOLF , HOTEL)) (1010 (DATA INDIA , JULIETT , KILO , LIMA , MIKE , NOVEMBER , OS
CAR , PAPA)) (1020 (DATA QUEBEC , ROMEO , SIERRA , TANGO , UNIFORM , VICTOR , WHISKEY , X-RAY)) (1030 (DATA YANKE
E) (DATA ZULU ) (REM EL ULTIMO VALOR ES ZULU)) (1040 (DATA HOLA MUNDO))) [110 2] [] [] [] 0 '{W$ "HO"}])
(shunting-yard '(LEN ( "HO" )))
(shunting-yard '(ASC ( MID3$ ( "FREQF" , 1 , 1 ) ) - 64))
(anular-invalidos '("*"))
(anular-invalidos '("" + "*"))
(desambiguar-mid '(MID$))
(variable-float? 'FIND)
(anular-invalidos '(REM FIND GREATEST COMMON DIVISOR (WITH USER SUPPLIED VALUES)))
(variable-float? 'FIND GREATEST COMMON DIVISOR (WITH USER SUPPLIED VALUES)
(variable-float? 'FIND GREATEST COMMON DIVISOR (WITH USER SUPPLIED VALUES))
(variable-float? (synbol 'FIND GREATEST COMMON DIVISOR (WITH USER SUPPLIED VALUES)))
(variable-float? (symbol "FIND GREATEST COMMON DIVISOR (WITH USER SUPPLIED VALUES)"))
